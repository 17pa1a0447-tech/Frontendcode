pipeline {
  agent any

  parameters {
    string(name: 'API_URL', defaultValue: 'http://localhost:9090/api/v1', description: 'Backend API base URL (will replace __API_URL__ in environment.prod.ts)')
  }

  environment {
    DOCKER_IMAGE = "jsandeep9866/crud-frontend"
    DOCKER_CRED_ID = "jsandeep9866"
    APP_DIR = "crud-application"    // path in the repo where Angular app lives
    CONTAINER_NAME = "frontend-container"
    HOST_PORT = "3025"
    CONTAINER_PORT = "80"
  }

  stages {
    stage('Clone') {
      steps {
        git branch: 'main', url: 'https://github.com/17pa1a0447-tech/Frontendcode.git'
      }
    }

    stage('Prepare / Replace API URL') {
      steps {
        dir("${APP_DIR}") {
          // replace placeholder in environment.prod.ts
          sh '''
            if [ -f src/environments/environment.prod.ts ]; then
              sed -i "s|__API_URL__|${API_URL}|g" src/environments/environment.prod.ts
            else
              echo "ERROR: environment.prod.ts not found"
              exit 1
            fi
          '''
        }
      }
    }

    stage('Install & Build') {
      steps {
        dir("${APP_DIR}") {
          sh '''
            npm ci
            npm run build -- --configuration=production
          '''
        }
      }
    }

    stage('Docker Build') {
      steps {
        dir("${APP_DIR}") {
          sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
        }
      }
    }

    stage('Docker Login & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_CRED_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest
            docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}
            docker push ${DOCKER_IMAGE}:latest
            docker logout
          '''
        }
      }
    }

    stage('Deploy to Dev (same server)') {
      steps {
        // Stop & remove existing container (if any), then run new container
        sh '''
          docker rm -f ${CONTAINER_NAME} || true
          docker run -d --name ${CONTAINER_NAME} -p ${HOST_PORT}:${CONTAINER_PORT} ${DOCKER_IMAGE}:latest
        '''
      }
    }
  }

  post {
    success {
      echo "Frontend: Build, Push & Deploy completed successfully"
    }
    failure {
      echo "Frontend pipeline failed"
    }
  }
}
